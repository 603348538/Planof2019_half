
nios_pio_it.elf:     file format elf32-littlenios2
nios_pio_it.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002188

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000528 memsz 0x00000528 flags r-x
    LOAD off    0x00001548 vaddr 0x00002548 paddr 0x0000254c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001550 vaddr 0x00002550 paddr 0x00002550 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000003c0  00002188  00002188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00002548  00002550  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00002548  0000254c  00001548  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00002550  00002550  00001550  2**2
                  ALLOC, SMALL_DATA
  6 .rom          00000000  00000020  00000020  0000154c  2**0
                  CONTENTS
  7 .ram          00000000  00002668  00002668  0000154c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00001570  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000013e4  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a84  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000948  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000234  00000000  00000000  00003f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000a7b  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000004b6  00000000  00000000  00004c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000050c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000110  00000000  00000000  000050f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000062a2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000062a5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000062aa  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000062ab  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000062ac  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000062b0  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000062b4  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  000062b8  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  000062bc  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  000062c0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  000062c4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000064  00000000  00000000  000062cb  2**0
                  CONTENTS, READONLY
 30 .jdi          0000361a  00000000  00000000  0000632f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0003b16c  00000000  00000000  00009949  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002188 l    d  .text	00000000 .text
00002548 l    d  .rodata	00000000 .rodata
00002548 l    d  .rwdata	00000000 .rwdata
00002550 l    d  .bss	00000000 .bss
00000020 l    d  .rom	00000000 .rom
00002668 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_pio_it_bsp//obj/HAL/src/crt0.o
000021d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00002550 l     O .bss	00000001 flag.1810
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00002564 g     O .bss	00000004 alt_instruction_exception_handler
00002420 g     F .text	0000002c alt_main
00002568 g     O .bss	00000100 alt_irq
0000254c g       *ABS*	00000000 __flash_rwdata_start
00002508 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_rom
0000255c g     O .bss	00000004 alt_argv
0000a548 g       *ABS*	00000000 _gp
00002494 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000021d4 g     F .text	00000038 key_interrupt
00002510 g     F .text	00000038 alt_icache_flush
00002000 g       *ABS*	00000000 __alt_mem_ram
00002668 g       *ABS*	00000000 __bss_end
000022d8 g     F .text	00000068 alt_iic_isr_register
000022c0 g     F .text	00000018 alt_ic_irq_enabled
00002554 g     O .bss	00000004 alt_irq_active
000020fc g     F .exceptions	00000060 alt_irq_handler
00002470 g     F .text	00000018 alt_dcache_flush_all
0000254c g       *ABS*	00000000 __ram_rwdata_end
00002548 g       *ABS*	00000000 __ram_rodata_end
00002668 g       *ABS*	00000000 end
0000215c g     F .exceptions	0000002c alt_instruction_exception_entry
00003000 g       *ABS*	00000000 __alt_stack_pointer
00002188 g     F .text	0000004c _start
0000246c g     F .text	00000004 alt_sys_init
00002548 g       *ABS*	00000000 __ram_rwdata_start
00002548 g       *ABS*	00000000 __ram_rodata_start
00002668 g       *ABS*	00000000 __alt_stack_base
00002550 g       *ABS*	00000000 __bss_start
0000220c g     F .text	00000040 main
00002558 g     O .bss	00000004 alt_envp
00002548 g       *ABS*	00000000 __flash_rodata_start
0000244c g     F .text	00000020 alt_irq_init
00002560 g     O .bss	00000004 alt_argc
00002020 g       .exceptions	00000000 alt_irq_entry
00002020 g       *ABS*	00000000 __ram_exceptions_start
0000224c g     F .text	00000004 alt_ic_isr_register
0000254c g       *ABS*	00000000 _edata
00002668 g       *ABS*	00000000 _end
00002188 g       *ABS*	00000000 __ram_exceptions_end
00002288 g     F .text	00000038 alt_ic_irq_disable
00003000 g       *ABS*	00000000 __alt_data_end
00002020 g     F .exceptions	00000000 alt_exception
0000001c g       .entry	00000000 _exit
00002488 g     F .text	0000000c alt_icache_flush_all
00002548 g     O .rwdata	00000004 alt_priority_mask
00002250 g     F .text	00000038 alt_ic_irq_enable
00002340 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xffff5abc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08486214 	ori	at,at,8584
    jmp r1
  18:	0800683a 	jmp	at

0000001c <_exit>:
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00002020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    2020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    2024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    2028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    2030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    2034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    2038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    2040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    2044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    2048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    2050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    2054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    2058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    2060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    2064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    2068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    2070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    2074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    2078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    207c:	10000326 	beq	r2,zero,208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    2080:	20000226 	beq	r4,zero,208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    2084:	00020fc0 	call	20fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    2088:	00000706 	br	20a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    208c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    2090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    2094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    2098:	000215c0 	call	215c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    209c:	1000021e 	bne	r2,zero,20a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    20a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    20a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    20a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    20ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    20b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    20b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    20b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    20bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    20c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    20c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    20c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    20cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    20d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    20d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    20d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    20dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    20e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    20e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    20e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    20ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    20f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    20f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    20f8:	ef80083a 	eret

000020fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    20fc:	defffe04 	addi	sp,sp,-8
    2100:	dfc00115 	stw	ra,4(sp)
    2104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    2108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    210c:	04000034 	movhi	r16,0
    2110:	84095a04 	addi	r16,r16,9576

  active = alt_irq_pending ();

  do
  {
    i = 0;
    2114:	0005883a 	mov	r2,zero
    mask = 1;
    2118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    211c:	20ca703a 	and	r5,r4,r3
    2120:	28000b26 	beq	r5,zero,2150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    2124:	100490fa 	slli	r2,r2,3
    2128:	8085883a 	add	r2,r16,r2
    212c:	10c00017 	ldw	r3,0(r2)
    2130:	11000117 	ldw	r4,4(r2)
    2134:	183ee83a 	callr	r3
    2138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    213c:	203ff51e 	bne	r4,zero,2114 <_gp+0xffff7bcc>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    2140:	dfc00117 	ldw	ra,4(sp)
    2144:	dc000017 	ldw	r16,0(sp)
    2148:	dec00204 	addi	sp,sp,8
    214c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    2150:	18c7883a 	add	r3,r3,r3
      i++;
    2154:	10800044 	addi	r2,r2,1

    } while (1);
    2158:	003ff006 	br	211c <_gp+0xffff7bd4>

0000215c <alt_instruction_exception_entry>:
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    215c:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    2160:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    2164:	d0e00717 	ldw	r3,-32740(gp)
    2168:	18000426 	beq	r3,zero,217c <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    216c:	10801f0c 	andi	r2,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    2170:	200b883a 	mov	r5,r4
    2174:	1008d0ba 	srli	r4,r2,2
    2178:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    217c:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    2180:	0005883a 	mov	r2,zero
    2184:	f800283a 	ret

Disassembly of section .text:

00002188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    2188:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    218c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    2190:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    2194:	00bffd16 	blt	zero,r2,218c <_gp+0xffff7c44>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2198:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    219c:	decc0014 	ori	sp,sp,12288
    movhi gp, %hi(_gp)
    21a0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    21a4:	d6a95214 	ori	gp,gp,42312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    21a8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    21ac:	10895414 	ori	r2,r2,9552

    movhi r3, %hi(__bss_end)
    21b0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    21b4:	18c99a14 	ori	r3,r3,9832

    beq r2, r3, 1f
    21b8:	10c00326 	beq	r2,r3,21c8 <_start+0x40>

0:
    stw zero, (r2)
    21bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    21c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    21c4:	10fffd36 	bltu	r2,r3,21bc <_gp+0xffff7c74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    21c8:	00023400 	call	2340 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    21cc:	00024200 	call	2420 <alt_main>

000021d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    21d0:	003fff06 	br	21d0 <_gp+0xffff7c88>

000021d4 <key_interrupt>:


void key_interrupt(void* p)
{
	static alt_u8 flag = 0;
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE,0x10);
    21d4:	00900304 	movi	r2,16396
    21d8:	00c00404 	movi	r3,16
    21dc:	10c00035 	stwio	r3,0(r2)
	flag = ~flag;
    21e0:	d0a00203 	ldbu	r2,-32760(gp)
    21e4:	00d00004 	movi	r3,16384
    21e8:	0084303a 	nor	r2,zero,r2
    21ec:	d0a00205 	stb	r2,-32760(gp)
	if(flag)
    21f0:	10803fcc 	andi	r2,r2,255
    21f4:	10000226 	beq	r2,zero,2200 <key_interrupt+0x2c>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);
    21f8:	18000035 	stwio	zero,0(r3)
    21fc:	f800283a 	ret
	else
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x0f);
    2200:	008003c4 	movi	r2,15
    2204:	18800035 	stwio	r2,0(r3)
    2208:	f800283a 	ret

0000220c <main>:

}

int main()
{ 
    220c:	defffe04 	addi	sp,sp,-8
  alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,
    2210:	01800034 	movhi	r6,0
    2214:	d8000015 	stw	zero,0(sp)
    2218:	000f883a 	mov	r7,zero
    221c:	31887504 	addi	r6,r6,8660
    2220:	000b883a 	mov	r5,zero
    2224:	0009883a 	mov	r4,zero
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x0f);

}

int main()
{ 
    2228:	dfc00115 	stw	ra,4(sp)
  alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID,
    222c:	000224c0 	call	224c <alt_ic_isr_register>
		  	  	  	  PIO_0_IRQ,
					  key_interrupt,
					  0,
					  0);

  IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_0_BASE,0x0f);
    2230:	00900104 	movi	r2,16388
    2234:	00c003c4 	movi	r3,15
    2238:	10c00035 	stwio	r3,0(r2)

  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE,0x10);
    223c:	00900204 	movi	r2,16392
    2240:	00c00404 	movi	r3,16
    2244:	10c00035 	stwio	r3,0(r2)
    2248:	003fff06 	br	2248 <_gp+0xffff7d00>

0000224c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    224c:	00022d81 	jmpi	22d8 <alt_iic_isr_register>

00002250 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2250:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2254:	00bfff84 	movi	r2,-2
    2258:	2084703a 	and	r2,r4,r2
    225c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2260:	00c00044 	movi	r3,1
    2264:	d0a00317 	ldw	r2,-32756(gp)
    2268:	194a983a 	sll	r5,r3,r5
    226c:	288ab03a 	or	r5,r5,r2
    2270:	d1600315 	stw	r5,-32756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2274:	d0a00317 	ldw	r2,-32756(gp)
    2278:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    227c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    2280:	0005883a 	mov	r2,zero
    2284:	f800283a 	ret

00002288 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2288:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    228c:	00bfff84 	movi	r2,-2
    2290:	2084703a 	and	r2,r4,r2
    2294:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2298:	00ffff84 	movi	r3,-2
    229c:	d0a00317 	ldw	r2,-32756(gp)
    22a0:	194a183a 	rol	r5,r3,r5
    22a4:	288a703a 	and	r5,r5,r2
    22a8:	d1600315 	stw	r5,-32756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    22ac:	d0a00317 	ldw	r2,-32756(gp)
    22b0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    22b4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    22b8:	0005883a 	mov	r2,zero
    22bc:	f800283a 	ret

000022c0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    22c0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    22c4:	00800044 	movi	r2,1
    22c8:	1144983a 	sll	r2,r2,r5
    22cc:	10c4703a 	and	r2,r2,r3
}
    22d0:	1004c03a 	cmpne	r2,r2,zero
    22d4:	f800283a 	ret

000022d8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    22d8:	00c007c4 	movi	r3,31
    22dc:	19401616 	blt	r3,r5,2338 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    22e0:	defffe04 	addi	sp,sp,-8
    22e4:	dfc00115 	stw	ra,4(sp)
    22e8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    22ec:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    22f0:	00ffff84 	movi	r3,-2
    22f4:	80c6703a 	and	r3,r16,r3
    22f8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    22fc:	280490fa 	slli	r2,r5,3
    2300:	00c00034 	movhi	r3,0
    2304:	18c95a04 	addi	r3,r3,9576
    2308:	1885883a 	add	r2,r3,r2
    230c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    2310:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2314:	30000226 	beq	r6,zero,2320 <alt_iic_isr_register+0x48>
    2318:	00022500 	call	2250 <alt_ic_irq_enable>
    231c:	00000106 	br	2324 <alt_iic_isr_register+0x4c>
    2320:	00022880 	call	2288 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2324:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    2328:	dfc00117 	ldw	ra,4(sp)
    232c:	dc000017 	ldw	r16,0(sp)
    2330:	dec00204 	addi	sp,sp,8
    2334:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    2338:	00bffa84 	movi	r2,-22
    233c:	f800283a 	ret

00002340 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2340:	deffff04 	addi	sp,sp,-4
    2344:	01000034 	movhi	r4,0
    2348:	01400034 	movhi	r5,0
    234c:	dfc00015 	stw	ra,0(sp)
    2350:	21095204 	addi	r4,r4,9544
    2354:	29495304 	addi	r5,r5,9548

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2358:	2140061e 	bne	r4,r5,2374 <alt_load+0x34>
    235c:	01000034 	movhi	r4,0
    2360:	01400034 	movhi	r5,0
    2364:	21080804 	addi	r4,r4,8224
    2368:	29480804 	addi	r5,r5,8224
    236c:	2140121e 	bne	r4,r5,23b8 <alt_load+0x78>
    2370:	00000b06 	br	23a0 <alt_load+0x60>
    2374:	00c00034 	movhi	r3,0
    2378:	18c95304 	addi	r3,r3,9548
    237c:	1907c83a 	sub	r3,r3,r4
    2380:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2384:	10fff526 	beq	r2,r3,235c <_gp+0xffff7e14>
    {
      *to++ = *from++;
    2388:	114f883a 	add	r7,r2,r5
    238c:	39c00017 	ldw	r7,0(r7)
    2390:	110d883a 	add	r6,r2,r4
    2394:	10800104 	addi	r2,r2,4
    2398:	31c00015 	stw	r7,0(r6)
    239c:	003ff906 	br	2384 <_gp+0xffff7e3c>
    23a0:	01000034 	movhi	r4,0
    23a4:	01400034 	movhi	r5,0
    23a8:	21095204 	addi	r4,r4,9544
    23ac:	29495204 	addi	r5,r5,9544

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    23b0:	2140101e 	bne	r4,r5,23f4 <alt_load+0xb4>
    23b4:	00000b06 	br	23e4 <alt_load+0xa4>
    23b8:	00c00034 	movhi	r3,0
    23bc:	18c86204 	addi	r3,r3,8584
    23c0:	1907c83a 	sub	r3,r3,r4
    23c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    23c8:	10fff526 	beq	r2,r3,23a0 <_gp+0xffff7e58>
    {
      *to++ = *from++;
    23cc:	114f883a 	add	r7,r2,r5
    23d0:	39c00017 	ldw	r7,0(r7)
    23d4:	110d883a 	add	r6,r2,r4
    23d8:	10800104 	addi	r2,r2,4
    23dc:	31c00015 	stw	r7,0(r6)
    23e0:	003ff906 	br	23c8 <_gp+0xffff7e80>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    23e4:	00024700 	call	2470 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    23e8:	dfc00017 	ldw	ra,0(sp)
    23ec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    23f0:	00024881 	jmpi	2488 <alt_icache_flush_all>
    23f4:	00c00034 	movhi	r3,0
    23f8:	18c95204 	addi	r3,r3,9544
    23fc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2400:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2404:	18bff726 	beq	r3,r2,23e4 <_gp+0xffff7e9c>
    {
      *to++ = *from++;
    2408:	114f883a 	add	r7,r2,r5
    240c:	39c00017 	ldw	r7,0(r7)
    2410:	110d883a 	add	r6,r2,r4
    2414:	10800104 	addi	r2,r2,4
    2418:	31c00015 	stw	r7,0(r6)
    241c:	003ff906 	br	2404 <_gp+0xffff7ebc>

00002420 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2420:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2424:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2428:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    242c:	000244c0 	call	244c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2430:	000246c0 	call	246c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2434:	d1a00417 	ldw	r6,-32752(gp)
    2438:	d1600517 	ldw	r5,-32748(gp)
    243c:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2440:	dfc00017 	ldw	ra,0(sp)
    2444:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2448:	000220c1 	jmpi	220c <main>

0000244c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    244c:	deffff04 	addi	sp,sp,-4
    2450:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    2454:	00025080 	call	2508 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2458:	00800044 	movi	r2,1
    245c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2460:	dfc00017 	ldw	ra,0(sp)
    2464:	dec00104 	addi	sp,sp,4
    2468:	f800283a 	ret

0000246c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    246c:	f800283a 	ret

00002470 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    2470:	0005883a 	mov	r2,zero
    2474:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    2478:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    247c:	10800804 	addi	r2,r2,32
    2480:	10fffd1e 	bne	r2,r3,2478 <_gp+0xffff7f30>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2484:	f800283a 	ret

00002488 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2488:	01440004 	movi	r5,4096
    248c:	0009883a 	mov	r4,zero
    2490:	00025101 	jmpi	2510 <alt_icache_flush>

00002494 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    2494:	213ffe84 	addi	r4,r4,-6
    2498:	008003c4 	movi	r2,15
    249c:	11001636 	bltu	r2,r4,24f8 <alt_exception_cause_generated_bad_addr+0x64>
    24a0:	200890ba 	slli	r4,r4,2
    24a4:	00800034 	movhi	r2,0
    24a8:	10892e04 	addi	r2,r2,9400
    24ac:	2089883a 	add	r4,r4,r2
    24b0:	20800017 	ldw	r2,0(r4)
    24b4:	1000683a 	jmp	r2
    24b8:	00002500 	call	250 <_exit+0x234>
    24bc:	00002500 	call	250 <_exit+0x234>
    24c0:	000024f8 	rdprs	zero,zero,147
    24c4:	000024f8 	rdprs	zero,zero,147
    24c8:	000024f8 	rdprs	zero,zero,147
    24cc:	00002500 	call	250 <_exit+0x234>
    24d0:	000024f8 	rdprs	zero,zero,147
    24d4:	000024f8 	rdprs	zero,zero,147
    24d8:	00002500 	call	250 <_exit+0x234>
    24dc:	00002500 	call	250 <_exit+0x234>
    24e0:	000024f8 	rdprs	zero,zero,147
    24e4:	00002500 	call	250 <_exit+0x234>
    24e8:	000024f8 	rdprs	zero,zero,147
    24ec:	000024f8 	rdprs	zero,zero,147
    24f0:	000024f8 	rdprs	zero,zero,147
    24f4:	00002500 	call	250 <_exit+0x234>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    24f8:	0005883a 	mov	r2,zero
    24fc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2500:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    2504:	f800283a 	ret

00002508 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2508:	000170fa 	wrctl	ienable,zero
    250c:	f800283a 	ret

00002510 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    2510:	00840004 	movi	r2,4096
    2514:	1140012e 	bgeu	r2,r5,251c <alt_icache_flush+0xc>
    2518:	100b883a 	mov	r5,r2
    251c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2520:	2005883a 	mov	r2,r4
    2524:	1140032e 	bgeu	r2,r5,2534 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2528:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    252c:	10800804 	addi	r2,r2,32
    2530:	003ffc06 	br	2524 <_gp+0xffff7fdc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2534:	210007cc 	andi	r4,r4,31
    2538:	20000126 	beq	r4,zero,2540 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    253c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2540:	0000203a 	flushp
    2544:	f800283a 	ret
